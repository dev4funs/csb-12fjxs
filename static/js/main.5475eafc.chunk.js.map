{"version":3,"sources":["App.js","index.js"],"names":["App","useState","grid","i","push","note","isActive","GenerateGrid","setGrid","isPlaying","setIsPlaying","currentColumn","setCurrentColumn","synth","Tone","toDestination","PlayMusic","a","music","map","column","columnNotes","shouldPlay","Sequencer","time","triggerAttackRelease","stop","clear","dispose","start","className","columnIndex","classNames","key","noteIndex","onClick","clickedColumn","clickedNote","updatedGrid","cell","cellIndex","cellCopy","handleNoteClick","NoteButton","rest","classes","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"iUAyBe,SAASA,IAGtB,MAAwBC,mBArB1B,WAEE,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAQ1BD,EAAKE,KAPQ,CACX,CAAEC,KAAM,IAAKC,UAAU,GACvB,CAAED,KAAM,IAAKC,UAAU,GACvB,CAAED,KAAM,IAAKC,UAAU,GACvB,CAAED,KAAM,IAAKC,UAAU,GACvB,CAAED,KAAM,IAAKC,UAAU,KAI3B,OAAOJ,EAS0BK,IAAjC,mBAAOL,EAAP,KAAaM,EAAb,KAGA,EAAkCP,oBAAS,GAA3C,mBAAOQ,EAAP,KAAkBC,EAAlB,KAGA,EAA0CT,mBAAS,MAAnD,mBAAOU,EAAP,KAAsBC,EAAtB,KAGMC,GAAQ,IAAIC,KAAiBC,gBAuBnC,IAAMC,EAAS,uCAAG,8BAAAC,EAAA,6DAEZC,EAAQ,GAEZhB,EAAKiB,KAAI,SAACC,GACR,IAAIC,EAAc,GAClBD,EAAOD,KACL,SAACG,GAAD,OAEEA,EAAWhB,UACXe,EAAYjB,KAAKkB,EAAWjB,KA/ChB,QAiDhBa,EAAMd,KAAKiB,MAZG,SAgBVP,MAhBU,UAsBVS,EAAY,IAAIT,KACpB,SAACU,EAAMJ,GAELR,EAAiBQ,GAGjBP,EAAMY,qBAAqBP,EAAME,GAAS,KAAMI,KAElD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,OAGEf,EAlCY,wBAoCdC,GAAa,GACbE,EAAiB,MArCH,UAuCRE,IAAeY,OAvCP,yBAwCRH,EAAUG,OAxCF,yBAyCRH,EAAUI,QAzCF,yBA0CRJ,EAAUK,UA1CF,iDA8ChBlB,GAAa,GA9CG,UAgDVa,EAAUM,QAhDA,yBAiDVf,IAAee,QAjDL,4CAAH,qDAoDf,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,gBACZ5B,EAAKiB,KAAI,SAACC,EAAQW,GAAT,OACR,yBACED,UAAWE,IAAW,cAAe,CACnC,sBAAuBrB,IAAkBoB,IAE3CE,IAAKF,EAAc,UAElBX,EAAOD,KAAI,WAAqBe,GAArB,IAAG7B,EAAH,EAAGA,KAAMC,EAAT,EAASA,SAAT,OACV,kBAAC,EAAD,CACED,KAAMA,EACNC,SAAUA,EACV6B,QAAS,kBArFvB,SAAyBC,EAAeC,GAEtC,IAAIC,EAAcpC,EAAKiB,KAAI,SAACC,EAAQW,GAAT,OACzBX,EAAOD,KAAI,SAACoB,EAAMC,GAChB,IAAIC,EAAWF,EAOf,OAJIR,IAAgBK,GAAiBI,IAAcH,IACjDI,EAASnC,UAAYiC,EAAKjC,UAGrBmC,QAKXjC,EAAQ8B,GAqEmBI,CAAgBX,EAAaG,IAC5CD,IAAK5B,EAAO0B,YAMtB,4BAAQD,UAAU,cAAcK,QAAS,kBAAMnB,MAC5CP,EAAY,OAAS,SAM9B,IAAMkC,EAAa,SAAC,GAAiC,IAA/BtC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,SAAasC,EAAW,iBAC5CC,EAAUvC,EAAW,oBAAsB,OACjD,OACE,0CAAQwB,UAAWe,GAAaD,GAC7BvC,IC3IDyC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACnD,EAAD,OAEF8C,K","file":"static/js/main.5475eafc.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./styles.css\";\nimport * as Tone from \"tone\";\nimport classNames from \"classnames\";\n\n// Function which creates a 5x8 grid,\n// with our chosen notes on the vertical axis\nfunction GenerateGrid() {\n  const grid = [];\n  for (let i = 0; i < 8; i++) {\n    let column = [\n      { note: \"A\", isActive: false },\n      { note: \"G\", isActive: false },\n      { note: \"E\", isActive: false },\n      { note: \"D\", isActive: false },\n      { note: \"C\", isActive: false }\n    ];\n    grid.push(column);\n  }\n  return grid;\n}\n\n// Our chosen octave for our five notes. Try changing this for higher or lower notes\nconst CHOSEN_OCTAVE = \"4\";\n\nexport default function App() {\n  // A nested array of objects is not performant, but is easier to understand\n  // performance is not an issue at this stage anyway\n  const [grid, setGrid] = useState(GenerateGrid());\n\n  // Boolean to handle if music is played or not\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  // Used to visualize which column is making sound\n  const [currentColumn, setCurrentColumn] = useState(null);\n\n  //Notice the new PolySynth in use here, to support multiple notes at once\n  const synth = new Tone.PolySynth().toDestination();\n\n  // Updates our Grid's state\n  // Written to be intelligble, not performant\n  function handleNoteClick(clickedColumn, clickedNote) {\n    // Shallow copy of our grid with updated isActive\n    let updatedGrid = grid.map((column, columnIndex) =>\n      column.map((cell, cellIndex) => {\n        let cellCopy = cell;\n\n        // Flip isActive for the clicked note-cell in our grid\n        if (columnIndex === clickedColumn && cellIndex === clickedNote) {\n          cellCopy.isActive = !cell.isActive;\n        }\n\n        return cellCopy;\n      })\n    );\n\n    //Updates the grid with the new note toggled\n    setGrid(updatedGrid);\n  }\n\n  const PlayMusic = async () => {\n    // Variable for storing our note in a appropriate format for our synth\n    let music = [];\n\n    grid.map((column) => {\n      let columnNotes = [];\n      column.map(\n        (shouldPlay) =>\n          //If isActive, push the given note, with our chosen octave\n          shouldPlay.isActive &&\n          columnNotes.push(shouldPlay.note + CHOSEN_OCTAVE)\n      );\n      music.push(columnNotes);\n    });\n\n    // Starts our Tone context\n    await Tone.start();\n\n    // Tone.Sequence()\n    //@param callback\n    //@param \"events\" to send with callback\n    //@param subdivision  to engage callback\n    const Sequencer = new Tone.Sequence(\n      (time, column) => {\n        // Highlight column with styling\n        setCurrentColumn(column);\n\n        //Sends the active note to our PolySynth\n        synth.triggerAttackRelease(music[column], \"8n\", time);\n      },\n      [0, 1, 2, 3, 4, 5, 6, 7],\n      \"8n\"\n    );\n\n    if (isPlaying) {\n      // Turn of our player if music is currently playing\n      setIsPlaying(false);\n      setCurrentColumn(null);\n\n      await Tone.Transport.stop();\n      await Sequencer.stop();\n      await Sequencer.clear();\n      await Sequencer.dispose();\n\n      return;\n    }\n    setIsPlaying(true);\n    // Toggles playback of our musical masterpiece\n    await Sequencer.start();\n    await Tone.Transport.start();\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"note-wrapper\">\n        {grid.map((column, columnIndex) => (\n          <div\n            className={classNames(\"note-column\", {\n              \"note-column--active\": currentColumn === columnIndex\n            })}\n            key={columnIndex + \"column\"}\n          >\n            {column.map(({ note, isActive }, noteIndex) => (\n              <NoteButton\n                note={note}\n                isActive={isActive}\n                onClick={() => handleNoteClick(columnIndex, noteIndex)}\n                key={note + columnIndex}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n      <button className=\"play-button\" onClick={() => PlayMusic()}>\n        {isPlaying ? \"Stop\" : \"Play\"}\n      </button>\n    </div>\n  );\n}\n\nconst NoteButton = ({ note, isActive, ...rest }) => {\n  const classes = isActive ? \"note note--active\" : \"note\";\n  return (\n    <button className={classes} {...rest}>\n      {note}\n    </button>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}